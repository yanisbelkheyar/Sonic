#In this file we give function to compute the anf for Simon
#we also provide some function to extract the degree distribution get the degree, and get the number of term


# This file was *autogenerated* from the file anf_experiment.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256);
_sage_const_128 = Integer(128);
_sage_const_15 = Integer(15);
_sage_const_7 = Integer(7);
_sage_const_32 = Integer(32);
_sage_const_1 = Integer(1);
_sage_const_2 = Integer(2);
_sage_const_57 = Integer(57);
_sage_const_58 = Integer(58);
_sage_const_0 = Integer(0)#!/usr/bin/env sage

import sys
import itertools
import sage.misc.prandom
from sage.rings.polynomial.pbori import substitute_variables
from sage.all import *

STATE_SIZE = 256 
H_STATE_SIZE = 128

            
xvars = ["x" + str(i) for i in range(STATE_SIZE)]
kvars = ["k" + str(i) for i in range(STATE_SIZE)]
T1 = TermOrder('deglex', STATE_SIZE)
T2 = TermOrder('deglex', STATE_SIZE)
T = T1 + T2
R = BooleanPolynomialRing(names=xvars+kvars, order=T)
a = R.inject_variables()
generators = list(R.gens())
bit_variables = generators[:STATE_SIZE]
key_variables = generators[STATE_SIZE:]  
statek0 = [bit_variables[i] + key_variables[i] for i in range(STATE_SIZE)]

state0_left = [bit_variables[i] for i in range(H_STATE_SIZE)]
state0_right = [bit_variables[i+H_STATE_SIZE] for i in range(H_STATE_SIZE)]

state_left_init,state_right_init = state0_left,state0_right

def chi(state_bits):
    return [state_bits[(i+2) % H_STATE_SIZE] + ((state_bits[(i+1) % H_STATE_SIZE]) * state_bits[(i+8) % H_STATE_SIZE]) for i in range(H_STATE_SIZE)]

def xor_state(state_1,state_2):
    return [state_1[i] + state_2[i] for i in range(H_STATE_SIZE)]

def left_output(state_bits_left,state_bits_right):
    # Chi step
    state_bits = chi(state_bits_left)
    # Xor left right input
    state_bits = xor_state(state_bits,state_bits_right)
    return state_bits

def right_output(state_bits_left):
    return state_bits_left

def print_state(state):

    state = str(state[_sage_const_57 ]*state[_sage_const_58 ])
    print(state)
    #print()
    print(state[_sage_const_57 ])
    print()
    #print(state[58])
    #print()
    #for i in range(len(state)):
    #    print(state[i])


def anf_full(nbr_round):
    state_left =  state_left_init
    state_right = state_right_init
    state_tmp = state_left
    for i in range(nbr_round):
        state_tmp = right_output(state_left)
        state_left = left_output(state_left,state_right)
        state_right = state_tmp

    state_str_left = [str(state_left[i]).split("+") for i in range(len(state_left))]
    state_str_right = [str(state_right[i]).split("+") for i in range(len(state_right))]

    return state_str_left,state_str_right


def get_max_deg_from_anf(anf):
    #transforme the anf into a string and split it with "+"
    anf_str = str(anf).split("+")
    term_0 = anf_str[0].split("*")

    return len(term_0)

def get_nbr_term(anf_left,anf_right):

    min = len(anf_left[0])
    max = 0
    #print(anf_left[0])
    for i in anf_left:
        if(len(i)<min):
            min = len(i)
        if(len(i)>max):
            max = len(i)
    print("min nbr term anf left",min)
    print("max nbr term anf left",max)

    #print(anf_right[0])
    min = len(anf_right[0])
    max = 0
    for i in anf_right:
        if(len(i)<min):
            min = len(i)
        if(len(i)>max):
            max = len(i)
    print("min nbr term anf right",min)
    print("max nbr term anf right",max)

def get_distribution(anf_left,anf_right):

    distri_left,distri_right = [0]*32,[0]*32

    for j in anf_left:
        distri_left[len(j.split("*"))] += 1

    for j in anf_right:
        distri_right[len(j.split("*"))] += 1

    print("distri left")
    for i in range(32):
        if(not distri_left[i]==0):
            print(i," : ",distri_left[i])

    print()
    print("distri right")
    for i in range(32):
        if(not distri_right[i]==0):
            print(i," : ",distri_right[i])

    print()
    print()
            

def anf_extended_1(nbr_round):
    state_left =  state_left_init
    state_right = state_right_init
    state_tmp = state_left

    for i in range(nbr_round-1):
        print(i)
        state_tmp = right_output(state_left)
        state_left = left_output(state_left,state_right)
        state_right = state_tmp

    print("distribution after ",i," round :")
    get_distribution(str(state_left[0]).split("+"),str(state_right[0]).split("+"))

    distri_left,distri_right = [0]*32,[0]*32
    
    #exenting one round for one coordinate
    state_right_tmp = state_left[0] + state_left[9] + state_left[96]

    print("right part for ",nbr_round)

    anf_right = str(state_right_tmp).split("+")

    print(len(anf_right))
    
    for j in anf_right:
        distri_right[len(j.split("*"))] += 1
    
    state_left = state_left[5] + state_right[0] + (state_left[1]+1)*state_left[2]

    print("left part for ",nbr_round)

    anf_left = str(state_left).split("+")

    print(len(anf_left))

    for j in anf_left:
        distri_left[len(j.split("*"))] += 1
    
    #return str(state_left).split("+"),str(state_right_tmp).split("+")


def max_deg_anf_exented_2(nbr_round):
    state_left = state_left_init
    state_right = state_right_init
    state_tmp = state_left
    for i in range(nbr_round-1):
        state_tmp = right_output(state_left)
        state_left = left_output(state_left,state_right)
        state_right = state_tmp

    
    state0_chi = (state_left[1]+1)*state_left[2] + state_left[5] + state_right[0],
    state1_chi = (state_left[112]+1)*state_left[113] + state_left[116] + state_right[111]

    #print("partial anf 5 round")

    state_str0 = str(state0_chi).split("+")
    state_str1 = str(state1_chi).split("+")

    max_deg = 0
    max_mono = []
    size = 40000
    for i in range(size):
        mono1 = state_str0[i].split("*")
        for j in range(size):
            mono2 = state_str1[j].split("*")
            deg = set(mono1+mono2)
            if(len(deg)>max_deg):
                max_deg=len(deg)
                max_mono = deg

    print(max_deg)
    print(max_mono)
    #state_res = state0_chi * state1_chi #+ state0

    #print_state(state_res)
    #print_state(state_right)   


#state_left,state_right = anf_3_round_theta_first(state_left,state_right)
#state_left,state_right = anf_3_round_chi_first(state_left,state_right)
#state_left,state_right = anf_3_round_theta_first(state_left,state_right)
#state_left,state_right = anf_3_round_theta_first(state_left,state_right)

#print_state(state_left)

nbr_round = int(sys.argv[1])

index = 0

if(len(sys.argv)==2):

    #max_deg_anf_exented_2(nbr_round)

    if(nbr_round==6):
        anf_left,anf_right = anf_extended_1(nbr_round)
    else:
        anf_left,anf_right = anf_full(nbr_round)
        #for i in range(len(anf_left[index])):
            #print(anf_left[index][i])
        get_nbr_term(anf_left,anf_right)
    
    get_distribution(anf_left[index],anf_right[index])
    
if(len(sys.argv)==3):

    nbr_round_end = int(sys.argv[2])

    for i in range(nbr_round,nbr_round_end):
        #max_deg_anf_exented_2(nbr_round)

        anf_left,anf_right = anf_full(i)
        #get_nbr_term(anf_left,anf_right)
        get_distribution(anf_left[index],anf_right[index])
