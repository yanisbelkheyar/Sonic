import sys
from diff_trail_search_sonic import *
from distribution_differential import *
from cluster_differential import *

def get_args():

    if(len(sys.argv)>=3):

        if(int(sys.argv[2])==512):
            #512 rotation
            SLR1,SNL1,SNL2,SLL1,SLL2,SLL3,M = 5,0,1,0,3,20,7

        
        if(int(sys.argv[2])==256):
            #256 heavy inverse 
            #SLR1,SNL1,SNL2,SLL1,SLL2,SLL3,M = 5,0,1,0,18,47,5

            #256 light inverse = 7
            SLR1,SNL1,SNL2,SLL1,SLL2,SLL3,M = 5,0,1,0,16,40,5
            



        nbr_round_start,nbr_round_end = 1,6


        if(sys.argv[1]=="-r"):

            min_weight = [0,0,0,0,0,25,26,0,0,0]

            list_rot = [[0,1,64],[0,1,65],
                        [0,2,64],[0,2,66],
                        [0,3,64],[0,3,67],
                        [0,4,64],[0,4,68],
                        [0,5,64],[0,5,69],
                        [0,6,64],[0,6,70],
                        [0,7,64],[0,7,71],
                        [0,8,64],[0,8,72],
                        [0,9,64],[0,9,73],
                        [0,10,64],[0,10,74],
                        [0,11,64],[0,11,75],
                        [0,12,64],[0,12,76],
                        [0,13,64],[0,13,77],
                        [0,14,64],[0,14,78],
                        [0,15,64],[0,15,79],
                        [0,16,64],[0,16,80],
                        [0,17,64],[0,17,81],
                        [0,18,64],[0,18,82],
                        [0,19,64],[0,19,83],
                        [0,20,64],[0,20,84],
                        [0,21,64],[0,21,85],
                        [0,22,64],[0,22,86],
                        [0,23,64],[0,23,87],
                        [0,24,64],[0,24,88],
                        [0,25,64],[0,25,89],
                        [0,26,64],[0,26,90],
                        [0,27,64],[0,27,91],
                        [0,28,64],[0,28,92],
                        [0,29,64],[0,29,93],
                        [0,30,64],[0,30,94],
                        [0,31,64],[0,31,95],
                        [0,32,64],[0,32,96],
                        [0,33,64],[0,33,97],
                        [0,34,64],[0,34,98],
                        [0,35,64],[0,35,99],
                        [0,36,64],[0,36,100],
                        [0,37,64],[0,37,101],
                        [0,38,64],[0,38,102],
                        [0,39,64],[0,39,103],
                        [0,40,64],[0,40,104],
                        [0,41,64],[0,41,105],
                        [0,42,64],[0,42,106],
                        [0,43,64],[0,43,107],
                        [0,44,64],[0,44,108],
                        [0,45,64],[0,45,109],
                        [0,46,64],[0,46,110],
                        [0,47,64],[0,47,111],
                        [0,48,64],[0,48,112],
                        [0,49,64],[0,49,113],
                        [0,50,64],[0,50,114],
                        [0,51,64],[0,51,115],
                        [0,52,64],[0,52,116],
                        [0,53,64],[0,53,117],
                        [0,54,64],[0,54,118],
                        [0,55,64],[0,55,119],
                        [0,56,64],[0,56,120],
                        [0,57,64],[0,57,121],
                        [0,58,64],[0,58,122],
                        [0,59,64],[0,59,123],
                        [0,60,64],[0,60,124],
                        [0,61,64],[0,61,125],
                        [0,62,64],[0,62,126],
                        [0,63,64],[0,63,127],
                        [0,64,65],[0,64,66],
                        [0,64,67],[0,64,68],
                        [0,64,69],[0,64,70],
                        [0,64,71],[0,64,72],
                        [0,64,73],[0,64,74],
                        [0,64,75],[0,64,76],
                        [0,64,77],[0,64,78],
                        [0,64,79],[0,64,80],
                        [0,64,81],[0,64,82],
                        [0,64,83],[0,64,84],
                        [0,64,85],[0,64,86],
                        [0,64,87],[0,64,88],
                        [0,64,89],[0,64,90],
                        [0,64,91],[0,64,92],
                        [0,64,93],[0,64,94],
                        [0,64,95],[0,64,96],
                        [0,64,97],[0,64,98],
                        [0,64,99],[0,64,100],
                        [0,64,101],[0,64,102],
                        [0,64,103],[0,64,104],
                        [0,64,105],[0,64,106],
                        [0,64,107],[0,64,108],
                        [0,64,109],[0,64,110],
                        [0,64,111],[0,64,112],
                        [0,64,113],[0,64,114],
                        [0,64,115],[0,64,116],
                        [0,64,117],[0,64,118],
                        [0,64,119],[0,64,120],
                        [0,64,121],[0,64,122],
                        [0,64,123],[0,64,124],
                        [0,64,125],[0,64,126],
                        [0,64,127]]
            
            list_rot_heavy = [[0,1,11],[0,1,14],[0,1,35],[0,1,59],[0,1,70],[0,1,94],[0,1,115],[0,1,118],[0,2,11],[0,2,15],[0,2,51],[0,2,55],[0,2,75],[0,2,79],[0,2,115],[0,2,119],[0,3,26],[0,3,33],[0,3,42],[0,3,49],[0,3,82],[0,3,89],[0,3,98],[0,3,105],[0,5,39],[0,5,47],[0,5,55],[0,5,63],[0,5,70],[0,5,78],[0,5,86],[0,5,94],[0,6,25],[0,6,33],[0,6,37],[0,6,45],[0,6,89],[0,6,97],[0,6,101],[0,6,109],[0,7,18],[0,7,29],[0,7,37],[0,7,58],[0,7,77],[0,7,98],[0,7,106],[0,7,117],[0,9,11],[0,9,19],[0,9,38],[0,9,59],[0,9,78],[0,9,99],[0,9,118],[0,9,126],[0,10,11],[0,10,19],[0,10,55],[0,10,63],[0,10,75],[0,10,83],[0,10,119],[0,10,127],[0,11,18],[0,11,26],[0,11,113],[0,11,121],[0,13,14],[0,13,15],[0,13,54],[0,13,70],[0,13,71],[0,13,87],[0,13,126],[0,13,127],[0,14,37],[0,14,41],[0,14,65],[0,14,77],[0,14,101],[0,14,105],[0,15,26],[0,15,37],[0,15,61],[0,15,82],[0,15,106],[0,15,117],[0,17,35],[0,17,38],[0,17,59],[0,17,62],[0,17,83],[0,17,86],[0,17,107],[0,17,110],[0,18,35],[0,18,47],[0,18,71],[0,18,75],[0,18,99],[0,18,111],[0,19,25],[0,19,50],[0,19,66],[0,19,81],[0,19,97],[0,19,122],[0,21,38],[0,21,46],[0,21,54],[0,21,62],[0,21,87],[0,21,95],[0,21,103],[0,21,111],[0,22,29],[0,22,37],[0,22,49],[0,22,57],[0,22,93],[0,22,101],[0,22,113],[0,22,121],[0,23,26],[0,23,37],[0,23,66],[0,23,74],[0,23,77],[0,23,85],[0,23,114],[0,23,125],[0,25,46],[0,25,59],[0,25,67],[0,25,86],[0,25,94],[0,25,107],[0,26,67],[0,26,75],[0,26,79],[0,26,87],[0,27,33],[0,27,41],[0,27,49],[0,27,57],[0,27,98],[0,27,106],[0,27,114],[0,27,122],[0,29,38],[0,29,47],[0,29,63],[0,29,94],[0,29,110],[0,29,119],[0,30,33],[0,30,37],[0,30,57],[0,30,61],[0,30,97],[0,30,101],[0,30,121],[0,30,125],[0,31,37],[0,31,50],[0,31,61],[0,31,74],[0,31,85],[0,31,98],[0,31,109],[0,31,122],[0,33,54],[0,33,78],[0,33,83],[0,33,107],[0,34,35],[0,34,39],[0,34,59],[0,34,63],[0,34,99],[0,34,103],[0,34,123],[0,34,127],[0,35,57],[0,35,73],[0,35,90],[0,35,106],[0,38,73],[0,38,81],[0,38,85],[0,38,93],[0,39,42],[0,39,45],[0,39,82],[0,39,85],[0,39,122],[0,39,125],[0,41,54],[0,41,62],[0,41,67],[0,41,102],[0,41,107],[0,41,115],[0,42,47],[0,42,59],[0,42,67],[0,42,103],[0,42,111],[0,42,123],[0,43,66],[0,43,74],[0,43,81],[0,43,82],[0,43,89],[0,43,90],[0,43,97],[0,43,105],[0,45,55],[0,45,62],[0,45,78],[0,45,95],[0,45,111],[0,45,118],[0,46,49],[0,46,61],[0,46,85],[0,46,89],[0,46,113],[0,46,125],[0,47,66],[0,47,85],[0,47,90],[0,47,109],[0,49,51],[0,49,75],[0,49,102],[0,49,126],[0,50,55],[0,50,59],[0,50,83],[0,50,95],[0,50,119],[0,50,123],[0,51,58],[0,51,65],[0,51,74],[0,51,105],[0,51,114],[0,51,121],[0,53,55],[0,53,63],[0,53,71],[0,53,79],[0,53,102],[0,53,110],[0,53,118],[0,53,126],[0,54,77],[0,54,85],[0,54,97],[0,54,105],[0,55,90],[0,55,93],[0,57,70],[0,57,75],[0,57,110],[0,57,115],[0,58,59],[0,58,63],[0,58,71],[0,58,115],[0,58,123],[0,58,127],[0,61,86],[0,61,87],[0,61,102],[0,61,103],[0,62,81],[0,62,85],[0,62,105],[0,62,109],[0,63,77],[0,63,114],[0,65,70],[0,65,75],[0,65,94],[0,65,99],[0,65,118],[0,65,123],[0,66,83],[0,66,87],[0,66,107],[0,66,111],[0,67,82],[0,67,97],[0,67,98],[0,67,113],[0,69,70],[0,69,78],[0,69,86],[0,69,94],[0,69,103],[0,69,111],[0,69,119],[0,69,127],[0,70,77],[0,70,121],[0,71,93],[0,71,98],[0,71,101],[0,71,106],[0,73,75],[0,73,78],[0,73,83],[0,73,118],[0,73,123],[0,73,126],[0,74,87],[0,74,95],[0,74,107],[0,74,115],[0,77,79],[0,77,126],[0,78,97],[0,78,109],[0,79,82],[0,79,101],[0,79,106],[0,79,125],[0,81,86],[0,81,99],[0,81,110],[0,81,123],[0,82,103],[0,82,107],[0,83,89],[0,83,122],[0,86,89],[0,86,125],[0,87,101],[0,87,114],[0,89,94],[0,89,123],[0,90,99],[0,90,107],[0,90,111],[0,90,119],[0,91,97],[0,91,98],[0,91,105],[0,91,106],[0,91,113],[0,91,114],[0,91,121],[0,91,122],[0,93,94],[0,93,110],[0,93,111],[0,93,127],[0,95,98],[0,95,101],[0,95,122],[0,95,125],[0,99,106],[0,99,121],[0,102,105],[0,102,113],[0,102,117],[0,102,125],[0,103,109],[0,103,122],[0,109,118],[0,109,119],[0,110,117],[0,110,121],[0,113,115],[0,113,126],[0,114,115],[0,114,127],[0,117,118],[0,117,119],[0,117,126],[0,117,127]]
            
            list_rot_7 = [[0,8,56],[0,8,80],[0,16,40],[0,16,104],[0,24,40],[0,24,112],[0,48,56],[0,48,120],[0,72,80],[0,72,120],[0,88,104],[0,88,112]]

            max_weight = 0
            list_good = []
            for rot in list_rot_7:
                SLL2 = rot[1]
                SLL3 = rot[2]
                print(rot)
                for j in range(5,6):
                    if(j%2!=0):
                        M = j
                        w = search_trail_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,min_weight,5,0)
                        if(w==26):
                            print("good rotation")
                            print(rot)
                        if(w!=None and w>max_weight):
                            #print("new max weight for 5 round = ",w,file=sys.stderr)
                            #print("for rotation values :",rot,j,file=sys.stderr)
                            min_weight[5] = w
                            list_good = [(rot,j)]
                            max_weight = w
                        if(w!=None and w==max_weight):
                            list_good.append((rot,j))
            
            print("max weight for 5 round = ",max_weight)
            for elt in list_good:
                print(elt)

        if(sys.argv[1]=="-t"):
            if(len(sys.argv)==4):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[3])+1
            elif(len(sys.argv)==5):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[4])
            #search for differential trails  
            #             0 1 2 3 4 5 6 7 8 9       
            min_weight = [0,0,0,0,0,0,0,0,0,0]

            for i in range(nbr_round_start,nbr_round_end):
                search_trail_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,min_weight,i,0)
        
        if(sys.argv[1]=="-td"):
            if(len(sys.argv)==4):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[3])+1
            elif(len(sys.argv)==5):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[4])
            #search for differential trails  
            #             0 1 2 3 4 5 6 7 8 9       
            min_weight = [0,0,0,0,0,0,0,0,0,0]

            for i in range(nbr_round_start,nbr_round_end):
                search_trail_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,min_weight,i,2)
        
        if(sys.argv[1]=="-tt"):
            if(len(sys.argv)==4):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[3])+1
            elif(len(sys.argv)==5):
                nbr_round_start,nbr_round_end = int(sys.argv[3]),int(sys.argv[4])
            #search for differential trails        
            min_weight = [0,0,0,0,0,0,0,0,0]

            for i in range(nbr_round_start,nbr_round_end):
                search_trail_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,min_weight,i,1)

        elif(sys.argv[1]=="-d"):
            size_sample = 0
            if(len(sys.argv)==5):
                size_sample = int(sys.argv[3])
                nbr_round_start,nbr_round_end = int(sys.argv[4]),int(sys.argv[4])+1
            elif(len(sys.argv)==6):
                size_sample = int(sys.argv[3])
                nbr_round_start,nbr_round_end = int(sys.argv[4]),int(sys.argv[5])

            #search for the distribution
            weight_min = [0,0,2,4,12,26,50]
            for i in range(nbr_round_start,nbr_round_end):
                search_distribution_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,weight_min,i,size_sample)
            print()
        elif(sys.argv[1]=="-c"):
            size_sample = 0
            if(len(sys.argv)==5):
                size_sample = int(sys.argv[3])
                nbr_round_start,nbr_round_end = int(sys.argv[4]),int(sys.argv[4])+1
            elif(len(sys.argv)==6):
                size_sample = int(sys.argv[3])
                nbr_round_start,nbr_round_end = int(sys.argv[4]),int(sys.argv[5])

            #search for the clustering effect
            weight_min = [0,0,2,4,12,18,36]
            for i in range(nbr_round_start,nbr_round_end):
                search_cluster_dif(SNL1,SNL2,SLR1,SLL1,SLL2,SLL3,M,weight_min,i,size_sample)
            print()

    else:
        print("order of the arguments : size p0 nl1 nl2 theta0 theta1 theta2 m (nbr_round_start nbr_round_end)")
        print("by defautl searching for 1 to 6 round trails")


get_args()
